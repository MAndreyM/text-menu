name: C++ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: mandrm/text-menu

jobs:
  # ============================================
  # Code Quality Checks (–£–ü–†–û–©–ï–ù–ù–´–ï)
  # ============================================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate file structure
      run: |
        echo "üìÅ Project structure check:"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        [ -f "Dockerfile" ] && echo "‚úÖ Dockerfile exists" || echo "‚ùå Missing Dockerfile"
        [ -f "CMakeLists.txt" ] && echo "‚úÖ CMakeLists.txt exists" || echo "‚ùå Missing CMakeLists.txt"
        [ -d "src" ] && echo "‚úÖ src directory exists" || echo "‚ùå Missing src directory"
        [ -f "src/CMakeLists.txt" ] && echo "‚úÖ src/CMakeLists.txt exists" || echo "‚ùå Missing src/CMakeLists.txt"

  # ============================================
  # Docker Builds (–û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨)
  # ============================================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        target: [dev, prod, builder]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: ${{ matrix.target }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.IMAGE_NAME }}:${{ matrix.target }}-${{ github.sha }}
          ${{ env.IMAGE_NAME }}:${{ matrix.target }}-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================
  # Container Tests (–í–°–ï –¢–ï–°–¢–´ –í –ö–û–ù–¢–ï–ô–ù–ï–†–ï)
  # ============================================
  container-tests:  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    name: Container Tests  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    runs-on: ubuntu-latest  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    needs: docker-build  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Å–µ–π job docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Wait for image to be available
      run: |
        timeout 300 bash -c '
          while ! docker pull ${{ env.IMAGE_NAME }}:dev-${{ github.sha }}; do
            echo "Waiting for image to be available..."
            sleep 10
          done
        '
        
    - name: Test development environment
      run: |
        echo "üß™ Testing RedOS development tools..."
        
        # –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –í–ù–£–¢–†–ò –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        docker run --rm ${{ env.IMAGE_NAME }}:dev-${{ github.sha }} bash -c "
          echo '1. Testing RedOS environment...'
          cat /etc/os-release
          echo ''
          
          echo '2. Testing package manager...'
          dnf --version
          echo ''
          
          echo '3. Testing build tools (–£–ñ–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´ –í DOCKERFILE)...'
          gcc --version | head -1
          g++ --version | head -1
          cmake --version | head -1
          ninja --version
          doxygen --version | head -1
          echo ''
          
          echo '4. Testing project build...'
          cd /project
          mkdir -p build
          cd build
          cmake -G Ninja .. -DBUILD_TESTS=ON
          ninja
          echo '‚úÖ Build successful'
          
          echo '5. Running tests...'
          ./tests/test_runner --success
          echo '‚úÖ All tests passed'
        "

  # ============================================
  # Security Scan
  # ============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:prod-${{ github.sha }}
        format: table
        severity: 'HIGH,CRITICAL'

  # ============================================
  # Finalize
  # ============================================
  finalize:
    name: Finalize
    runs-on: ubuntu-latest
    needs: [container-tests, security-scan]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "üéâ Pipeline Summary"
        echo "=================="
        echo "Image: ${{ env.IMAGE_NAME }}"
        echo "Tags:"
        echo "  - dev-${{ github.sha }}"
        echo "  - prod-${{ github.sha }}" 
        echo "  - builder-${{ github.sha }}"
        echo "Platform: RedOS (UBI8)"
        echo "Status: ${{ needs.container-tests.result }}"